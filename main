import pygame, pygame_menu, random, time 

from pygame.locals import *

#  cores para serem usadas durante o jogo
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
RED = (255, 0, 0)
YELLOW = (255, 255, 0)

#  tamanho da tela 
WIDTH = 1200
HEIGHT = 800

#  velocidade do jogador no eixo x 
speed_player = 8


#  classes do jogador, obstáculos e das balas 
class Player(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        
        self.image_run = [pygame.image.load('sprites/sprite_0.png'),
                          pygame.image.load('sprites/sprite_1.png'),
                          pygame.image.load('sprites/sprite_2.png')
                          ]

        self.image = pygame.image.load('sprites/sprite_0.png')
        self.rect = pygame.Rect(WIDTH//2, 600, 32*3, 32*3)
        self.current_image = 0
    
    def update(self, *args):
        
        key = pygame.key.get_pressed()
        if key[pygame.K_a]:
            self.rect[0] -= speed_player
            
        if key[pygame.K_d]:
            self.rect[0] += speed_player
            
        self.current_image = (self.current_image + 1) % 3
        self.image = self.image_run[self.current_image]
        self.image = pygame.transform.scale(self.image, (32*3, 32*3))
           
        if self.rect.x < -10:
            self.rect.x = -10
        elif self.rect.x > 1140:
            self.rect.x = 1140

class Obstacle(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        
        self.image = pygame.image.load('sprites/sprite_3.png')
        self.image = pygame.transform.scale(self.image, (40, 40))
        self.rect = pygame.Rect(450, -100 , 40, 40)
        
        self.speed = 5

        self.rect.x = random.randint(32, 1100)
        self.rect.y = random.randint(-100, -50)

    def update(self, *args):
        self.rect.y += self.speed

        if self.rect.bottom > 800:
            self.kill()

class Obstacle2(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        
        self.image = pygame.image.load('sprites/sprite_3.png')
        self.image = pygame.transform.scale(self.image, (40, 40))
        self.rect = pygame.Rect(450, -100 , 40, 40)
        
        self.speed = 10

        self.rect.x = random.randint(40, 1100)
        self.rect.y = random.randint(-100, -50)

    def update(self, *args):
        self.rect.y += self.speed

        if self.rect.bottom > 800:
            self.kill()

class Obstacle3(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        
        self.image = pygame.image.load('sprites/sprite_3.png')
        self.image = pygame.transform.scale(self.image, (40, 40))
        self.rect = pygame.Rect(450, -100 , 40, 40)
        
        self.speed = 15

        self.rect.x = random.randint(40, 1100)
        self.rect.y = random.randint(-100, -50)

    def update(self, *args):
        self.rect.y += self.speed

        if self.rect.bottom > 800:
            self.kill()

class Bullets(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        
        self.image = pygame.image.load('sprites/pinguim_0.png')
        self.image = pygame.transform.scale(self.image, (32, 32))
        self.rect = self.image.get_rect()
        self.speed = 5

    def update(self, *args):
        self.rect.y -= self.speed
        if self.rect.top < 0:
            self.kill()

pygame.init()

surface = pygame.display.set_mode((1200, 800))

def Game():
   
    #  grupos das classes do jogo 
    player_group = pygame.sprite.Group()
    player = Player()
    player_group.add(player)

    obstacle_group = pygame.sprite.Group()
    obstacle = Obstacle()
    obstacle_group.add(obstacle)

    obstacle2_group = pygame.sprite.Group()
    obstacle2 = Obstacle2()
    obstacle2_group.add(obstacle2)

    obstacle3_group = pygame.sprite.Group()
    obstacle3 = Obstacle3()
    obstacle3_group.add(obstacle3)

    bullets_group = pygame.sprite.Group()
    bullets = Bullets()
    bullets_group.add(bullets)

    #  flag do loop infinito do jogo 
    game_loop = True
    
    #  músicas
    pygame.mixer.music.set_volume(0.1)
    
    background_music = pygame.mixer.music.load('backgroundMusic.ogg')
    pygame.mixer.music.play(-1)

    dead_sound = pygame.mixer.Sound('collisionMusic.wav')

    hit_sound = pygame.mixer.Sound('hitMusic.wav')

    shot_sound = pygame.mixer.Sound('shotMusic.wav')

    #  fonte da pontuação do jogador
    font = pygame.font.SysFont('Corbel', 30, True, False)

    #  contador da pontuação do jogador 
    score = 0

    #  tela e fundo de tela 
    surface = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption('SALLES VS WINDOWS')

    background_image = pygame.image.load('background.png')
    background_image = pygame.transform.scale(background_image, (WIDTH, HEIGHT))

    #  funções de desenho na tela e para atualizar a tela 
    def draw():
        player_group.draw(surface)
        obstacle_group.draw(surface)


    def update():
        player_group.update()
        obstacle_group.update()

    #  atualizar o fps dentro do loop 
    clock = pygame.time.Clock()

    #  tempo para dar spawn em novos obstáculos dentro do loop
    timer = 20
    count = 0


    while game_loop:
        #  ajustando a taxa de fps
        clock.tick(60)

        #  colocando a imagem de fundo do jogo em andamento
        surface.blit(background_image, (0, 0))

        #  texto que irá receber a pontuação
        text = f'Pontuação:{score:.0f}'
        text_format = font.render(text, True, WHITE)

        #  o jogo só fecha se clicar no 'X' da janela 
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
        
        #  definindo que a tecla espaço irá disparar a bala
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    shot_sound.play()
                    new_Bullet = Bullets()
                    player_group.add(new_Bullet) 
                    bullets_group.add(new_Bullet)
                    
                    #  a bala vai sair do próprio jogador
                    new_Bullet.rect.center = player.rect.center  
                    
                    #  cada vez que a tecla é apertada o jogador perde 1 ponto 
                    score -= 1  

        timer += 1
        score += 0.005
        
        if count < 2000:
            if timer > 20:
                timer = 0
                if random.random() < 0.7:
                    newObstacle = Obstacle()
                    obstacle_group.add(newObstacle)

        elif count < 5000:
            if timer > 10:
                timer = 0
                if random.random() <= 1:
                    newObstacle = Obstacle2()
                    obstacle_group.add(newObstacle)

        else:
            if timer > 10:
                timer = 0
                if random.random() <= 1:
                    newObstacle = Obstacle3()
                    obstacle_group.add(newObstacle)

        # contador para saber quando aumentar a velocidade dos obstáculos
        count += 1
        
        # verificando a colisão entre o player o obstáculo
        collisions = pygame.sprite.spritecollide(player, obstacle_group, False, pygame.sprite.collide_mask)

        # verificando se as balas estão colidindo com os obstáculos para que, dessa forma, os obstáculos sejam eliminados 
        hits = pygame.sprite.groupcollide(bullets_group, obstacle_group, True, True, pygame.sprite.collide_mask)
        
        # se houver colisão o jogo irá encerrar e vai para a tela de 
        if collisions:
            dead_sound.play()
            time.sleep(3)   
            break

        # se a bala acertar algum obstáculo a pontuação aumenta em 2 pontos 
        if hits:
            score += 2
            hit_sound.play()

        # se a pontuação do jogador for menor que 0 ,ela irá travar em 0, para que não fique negativa      
        if score < 0:
            score = 0
        
        #  escrevendo na tela a pontuação do jogador 
        surface.blit(text_format, (1000,40))

        update()  
        draw()
        
        # atualizando a tela 
        pygame.display.flip()


#  criando um submenu para ajudar nos controles do jogo
submenu_controls_theme = pygame_menu.themes.THEME_GREEN.copy()
submenu_controls_theme.widget_font_size = 35
play_controls = pygame_menu.Menu(
        height = 800,
        theme = submenu_controls_theme,
        title ='CONTROLES',
        width = 1200
)
help_controls = 'Aperte a tecla "A" para ir para a esquerda\n' \
                'Aperte a tecla "D" para ir para a direita\n' \
                'Aperte a barra de espaço para lançar os pinguins\n' \

play_controls.add.label(help_controls, max_char = -1, font_size = 40)
play_controls.add.button('Voltar ao menu principal', pygame_menu.events.RESET)

#  criando um submenu para ajudar no objetivo do jogo
submenu_objective_theme = pygame_menu.themes.THEME_GREEN.copy()
submenu_objective_theme.widget_font_size = 35
play_objective = pygame_menu.Menu(
        height = 800,
        theme = submenu_controls_theme,
        title ='DICAS',
        width = 1200
)

help_objective = '1 - Tente conseguir o maior número de pontos possíveis!\n\n' \
                 '2 - Cuidado, se você tocar no windows está morto, tente escapar ou eliminá-los\n\n' \
                 '3 - A cada windows destruído você ganha 2 pontos\n\n' \
                 '4 - A cada pinguim lançado você perde 1 ponto, tente não errar ou lançar muitos de uma vez para não zerar a sua pontuação\n\n' \
                 '5 - Você também ganha pontos na medida em que o tempo passa, fica esperto\n\n' \
                 '6 - O jogo possui 3 velocidades diferentes que mudam conforme o tempo passa, tente chegar na mais rápida e pontuar bastante!\n'

play_objective.add.label(help_objective, max_char = -1, font_size = 30)
play_objective.add.button('Voltar ao menu principal', pygame_menu.events.RESET)

# criando o menu do jogo 
menu = pygame_menu.Menu('MENU', 1200, 800,theme = pygame_menu.themes.THEME_GREEN)
game_name = '      SALLES   VS   WINDOWS\n'

menu.add.label(game_name, max_char = -1, font_size = 60)

menu.add.button('JOGAR', Game)
menu.add.button('CONTROLES', play_controls)
menu.add.button('DICAS', play_objective)
menu.add.button('SAIR', pygame_menu.events.EXIT)

menu.mainloop(surface)
